// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "ctrl+enter",
        "command": "-language-julia.executeJuliaCodeInREPL",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "ctrl+shift+i",
        "command": "shellLauncher.launch"
    },
    {
        "key": "alt+enter",
        "command": "-language-julia.executeJuliaBlockInREPL",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "alt+enter",
        "command": "language-julia.executeJuliaFileInREPL",
        "when": "editorTextFocus && editorLangId == 'julia'"
    },
    {
        "key": "alt+/",
        "command": "metaGo.gotoSmart",
        "when": "neovim.mode != 'insert'"
    },
    {
        "command": "vscode-neovim.compositeEscape1",
        "key": "j",
        "when": "neovim.mode == insert",
        "args": "j"
    },
    {
        "key": "alt+/",
        "command": "-metaGo.gotoSmart"
    },
    {
        "key": "f9",
        "command": "-editor.debug.action.toggleBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "f9 p",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+l",
        "command": "-vscode-neovim.send",
        "when": "neovim.mode == 'cmdline_insert' || neovim.mode == 'cmdline_normal' || neovim.mode == 'cmdline_replace'"
    },
    {
        "key": "ctrl+l",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+l",
        "command": "-metaGo.selectLineDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+l",
        "command": "-expandLineSelection",
        "when": "textInputFocus"
    },
    {
        "key": "f9 r",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "f9 e",
        "command": "workbench.action.splitEditor"
    },
    {
        "key": "ctrl+\\",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "f9 q",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "f9 a",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+k ctrl+left",
        "command": "-workbench.action.focusLeftGroup"
    },
    {
        "key": "f9 d",
        "command": "workbench.action.focusRightGroup"
    },
    {
        "key": "ctrl+k ctrl+right",
        "command": "-workbench.action.focusRightGroup"
    },
    {
        "key": "f9 f9",
        "command": "metaGo.gotoBefore"
    },
    {
        "key": "alt+,",
        "command": "-metaGo.gotoBefore"
    },
    {
        "key": "f10",
        "command": "spacecode.space",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "space",
        "command": "-spacecode.space",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode =~ /^Normal|Visual|VisualBlock|VisualLine$/"
    },
    {
        "key": "alt+t",
        "command": "workbench.action.toggleMaximizedPanel",
        "when": "terminalFocus "
    },
    {
        "key": "alt+u",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal"
    }
]